# DEFINITIONS:  -*-sh-*-
#
# Performs some basic test of iyActiveSingleScat. The test is based on the fact
# that dBZ is defined with respect to the Rayleigh scattering of a 1mm liquid
# droplet. The test is designed in such way that the direct backscattering
# shall be -30 dBZ.
#
# The input files to this test were generated by setup_iyactive.m
#

import numpy as np
import arts
from arts.workspace import Workspace, arts_agenda

ws = Workspace(verbosity=0)
ws.execute_controlfile("general/general.arts")
ws.execute_controlfile("general/continua.arts")
ws.execute_controlfile("general/agendas.arts")
ws.execute_controlfile("general/planet_earth.arts")
# Agenda for scalar gas absorption calculation
ws.Copy(ws.abs_xsec_agenda, ws.abs_xsec_agenda__noCIA)
# on-the-fly absorption
ws.Copy(ws.propmat_clearsky_agenda, ws.propmat_clearsky_agenda__OnTheFly)
# A pressure grid rougly matching 0 to 16 km, in steps of 50 m.
ws.VectorNLogSpace(ws.p_grid, 321, 100000.0, 10000.0)
# Initial definition of species
ws.abs_speciesSet(species=["N2", "O2", "H2O"])
# No line data needed here
ws.abs_lines_per_speciesSetEmpty()
# Dimensionality of the atmosphere
ws.AtmosphereSet1D()
# Atmospheric profiles
ws.AtmRawRead(basename="testdata/tropical")
#
ws.AtmFieldsCalc()
# Get ground altitude (z_surface) from z_field
ws.Extract(ws.z_surface, ws.z_field, 0)
# Various things not used
ws.ArrayOfStringSet(ws.iy_aux_vars, [])
ws.jacobianOff()
# Non-standard variables
#
ws.NumericCreate("t_ref")
ws.NumericCreate("dbz_ref")
ws.NumericCreate("dbz_max")
ws.NumericCreate("weight_ext")
# Adjust t_field
#
ws.ReadXML(ws.t_ref, "testdata/t_ref.xml")
#
ws.Tensor3Scale(ws.t_field, ws.t_field, 0.0)
ws.Tensor3AddScalar(ws.t_field, ws.t_field, ws.t_ref)
# The cloudbox
#
ws.FlagOn(ws.cloudbox_on)
ws.ReadXML(ws.cloudbox_limits, "testdata/cbox_limits.xml")
ws.ReadXML(ws.pnd_field, "testdata/pnd_field.xml")
ws.ReadXML(ws.scat_data, "testdata/scat_data.xml")
# Define the radar
#
ws.ReadXML(ws.f_grid, "testdata/f_grid.xml")
ws.ReadXML(ws.range_bins, "testdata/range_bins.xml")
#
ws.ReadXML(ws.sensor_pos, "testdata/sensor_pos.xml")
ws.MatrixSet(ws.sensor_los, array([[180.0]]))
#
@arts_agenda
def iy_transmitter_agenda(ws):
    ws.Ignore(ws.rtp_pos)
    ws.Ignore(ws.rtp_los)
    ws.iy_transmitterSinglePol()


ws.iy_transmitter_agenda = iy_transmitter_agenda

ws.ArrayOfIndexSet(ws.instrument_pol, [5])
ws.Append(ws.instrument_pol_array, ws.instrument_pol)
#
@arts_agenda
def iy_main_agenda(ws):
    ws.Ignore(ws.iy_id)
    ws.Ignore(ws.rte_pos2)
    ws.Ignore(ws.iy_unit)
    ws.ppathPlaneParallel(cloudbox_on=0)
    ws.iyActiveSingleScat(pext_scaling=ws.weight_ext)


ws.iy_main_agenda = iy_main_agenda

ws.IndexSet(ws.stokes_dim, 3)
ws.sensorOff()
ws.StringSet(ws.iy_unit, "dBZe")
# Make checks
#
ws.abs_xsec_agenda_checkedCalc()
ws.propmat_clearsky_agenda_checkedCalc()
ws.atmfields_checkedCalc()
ws.atmgeom_checkedCalc()
ws.cloudbox_checkedCalc()
ws.sensor_checkedCalc()
ws.scat_data_checkedCalc()
ws.lbl_checkedCalc()
# Test with all extinction set to 0
#
ws.NumericSet(ws.weight_ext, 0.0)
#
ws.yActive(ze_tref=ws.t_ref)
#
# Here we expect a close match with dbz_ref
ws.ReadXML(ws.dbz_ref, "testdata/dbz_ref.xml")
ws.NumericFromVector(ws.dbz_max, ws.y, "max")
ws.Compare(ws.dbz_max, ws.dbz_ref, 0.005)
# Test with particle extinction
#
ws.NumericSet(ws.weight_ext, 1.0)
#
ws.yActive(ze_tref=ws.t_ref)
#
# Still a quite close match expected
ws.NumericFromVector(ws.dbz_max, ws.y, "max")
ws.Compare(ws.dbz_max, ws.dbz_ref, 0.01)
# Result, with gas absorption
#
ws.abs_speciesSet(species=["N2-SelfContStandardType", "O2-PWR93", "H2O-PWR98"])
ws.abs_xsec_agenda_checkedCalc()
ws.propmat_clearsky_agenda_checkedCalc()
#
ws.yActive(ze_tref=ws.t_ref)
#
# Here we expect 0.13 attenuation in max value
ws.NumericFromVector(ws.dbz_max, ws.y, "max")
ws.NumericAdd(ws.dbz_max, ws.dbz_max, 0.13)
ws.Compare(ws.dbz_max, ws.dbz_ref, 0.01)
