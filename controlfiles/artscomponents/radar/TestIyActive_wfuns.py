# DEFINITIONS:  -*-sh-*-
#
# Tests iyActiveSingleScat with respect to Jacobian calculations
#
# The input files to this test were generated by setup_wfun_test.m
#

import numpy as np
import arts
from arts.workspace import Workspace, arts_agenda

ws = Workspace(verbosity=0)
ws.execute_controlfile("general/general.arts")
ws.execute_controlfile("general/continua.arts")
ws.execute_controlfile("general/agendas.arts")
ws.execute_controlfile("general/planet_earth.arts")
# Read data from files
ws.ReadXML(ws.p_grid, "testdata/p_grid_wfuntest.xml")
ws.ReadXML(ws.particle_bulkprop_field, "testdata/particle_bulkprop_field.xml")
ws.ReadXML(ws.particle_bulkprop_names, "testdata/particle_bulkprop_names.xml")
ws.ReadXML(ws.f_grid, "testdata/f_grid_wfuntest.xml")
ws.ReadXML(ws.scat_data_raw, "testdata/scat_data_wfuntest.xml")
ws.ReadXML(ws.scat_meta, "testdata/scat_meta_wfuntest.xml")
# Some basic settings
ws.AtmosphereSet1D()
ws.IndexSet(ws.stokes_dim, 2)
# Agenda for scalar gas absorption calculation
ws.Copy(ws.abs_xsec_agenda, ws.abs_xsec_agenda__noCIA)
# on-the-fly absorption
ws.Copy(ws.propmat_clearsky_agenda, ws.propmat_clearsky_agenda__OnTheFly)
# Definition of species
ws.abs_speciesSet(species=["N2-SelfContStandardType", "O2-PWR93", "H2O-PWR98"])
# No line data needed here
ws.abs_lines_per_speciesSetEmpty()
# Atmospheric profiles
ws.AtmRawRead(basename="testdata/tropical")
#
ws.AtmFieldsCalc()
# Get ground altitude (z_surface) from z_field
ws.Extract(ws.z_surface, ws.z_field, 0)
# scat_species and pnd_agenda
#
ws.StringCreate("species_id_string")
#
# Scat species 0
ws.StringSet(ws.species_id_string, "IWC")
ws.ArrayOfStringSet(ws.pnd_agenda_input_names, ["IWC"])


@arts_agenda
def pnd_agenda_array(ws):
    ws.ScatSpeciesSizeMassInfo(
        species_index=ws.agenda_array_index, x_unit="dveq", x_fit_start=0.0001
    )
    ws.Copy(ws.psd_size_grid, ws.scat_species_x)
    ws.Copy(ws.pnd_size_grid, ws.scat_species_x)
    ws.psdMcFarquaharHeymsfield97(t_min=10.0, t_max=273.0, t_min_psd=210.0)
    ws.pndFromPsdBasic()


ws.Append(ws.pnd_agenda_array, pnd_agenda_array)

ws.Append(ws.scat_species, ws.species_id_string)
ws.Append(ws.pnd_agenda_array_input_names, ws.pnd_agenda_input_names)
#
ws.scat_dataCalc()
ws.scat_data_checkedCalc()
ws.cloudboxSetFullAtm()
# Define radar
#
ws.sensorOff()
#
ws.MatrixSet(ws.sensor_pos, array([[400000.0]]))
ws.MatrixSet(ws.sensor_los, array([[180.0]]))
#
ws.ArrayOfIndexSet(ws.instrument_pol, [5])
ws.Append(ws.instrument_pol_array, ws.instrument_pol)
#
@arts_agenda
def iy_transmitter_agenda(ws):
    ws.Ignore(ws.rtp_pos)
    ws.Ignore(ws.rtp_los)
    ws.iy_transmitterSinglePol()


ws.iy_transmitter_agenda = iy_transmitter_agenda

#
@arts_agenda
def iy_main_agenda(ws):
    ws.Ignore(ws.iy_id)
    ws.Ignore(ws.rte_pos2)
    ws.Ignore(ws.iy_unit)
    ws.ppathPlaneParallel(cloudbox_on=0)
    ws.iyActiveSingleScat(trans_in_jacobian=1)


ws.iy_main_agenda = iy_main_agenda

#
ws.StringSet(ws.iy_unit, "Ze")
#
ws.VectorLinSpace(ws.range_bins, 0.0, 15000.0, 500.0)
# Perform some checks
ws.abs_xsec_agenda_checkedCalc()
ws.propmat_clearsky_agenda_checkedCalc()
ws.atmfields_checkedCalc()
ws.atmgeom_checkedCalc()
ws.sensor_checkedCalc()
ws.lbl_checkedCalc()
# IWC, analytical Jacobian
#
ws.MatrixCreate("Ja")
ws.VectorCreate("rgrid")
ws.Copy(ws.rgrid, ws.p_grid)
#
ws.jacobianInit()
#
ws.jacobianAddScatSpecies(
    species="IWC", quantity="IWC", g1=ws.rgrid, g2=ws.lat_grid, g3=ws.lon_grid
)
# jacobianAddAbsSpecies(
#    species  = "H2O-PWR98",
#    unit     = "vmr",
#    g1       = rgrid,
#    g2       = lat_grid,
#    g3       = lon_grid
# )
# jacobianAddTemperature(
#    hse = "off",
#    g1  = rgrid,
#    g2  = lat_grid,
#    g3  = lon_grid
# )
#
ws.jacobianClose()
#
ws.pnd_fieldCalcFromParticleBulkProps()
#
ws.cloudbox_checkedCalc()
ws.yActive()
#
ws.Copy(ws.Ja, ws.jacobian)
ws.WriteXML(ws.output_file_format, ws.y, "y0.xml", 0)
ws.WriteXML(ws.output_file_format, ws.jacobian, "J_iwc_analytical.xml", 0)
# IWC, perturbation Jacobian
#
ws.MatrixCreate("Jp")
ws.IndexNumberOfAtmosphericPoints(n=ws.ybatch_n, p_grid=ws.rgrid)
ws.NumericCreate("perturbation")
ws.NumericSet(ws.perturbation, 1e-09)
ws.jacobianOff()
ws.pnd_fieldCalcFromParticleBulkProps()
ws.cloudbox_checkedCalc()
#
@arts_agenda
def ybatch_calc_agenda(ws):
    ws.particle_bulkprop_fieldPerturb(
        p_ret_grid=ws.rgrid,
        lat_ret_grid=ws.lat_grid,
        lon_ret_grid=ws.lon_grid,
        particle_type="IWC",
        pert_index=ws.ybatch_index,
        pert_size=ws.perturbation,
        pert_mode="absolute",
    )
    ws.pnd_fieldCalcFromParticleBulkProps()
    ws.yActive()


ws.ybatch_calc_agenda = ybatch_calc_agenda

#
ws.ybatchCalc(ybatch_start=0)
ws.jacobianFromYbatch(pert_size=ws.perturbation)
ws.Copy(ws.Jp, ws.jacobian)
ws.WriteXML(ws.output_file_format, ws.jacobian, "J_iwc_perturbation.xml", 0)
#
ws.CompareRelative(ws.Jp, ws.Ja, 1)
# H2O, analytical Jacobian
#
ws.Copy(ws.rgrid, ws.p_grid)
#
ws.jacobianInit()
#
ws.jacobianAddAbsSpecies(
    species="H2O-PWR98", unit="rel", g1=ws.rgrid, g2=ws.lat_grid, g3=ws.lon_grid
)
# jacobianAddTemperature(
#    hse = "off",
#    g1  = rgrid,
#    g2  = lat_grid,
#    g3  = lon_grid
# )
#
ws.jacobianClose()
#
ws.pnd_fieldCalcFromParticleBulkProps()
#
ws.cloudbox_checkedCalc()
ws.yActive()
#
ws.Copy(ws.Ja, ws.jacobian)
ws.WriteXML(ws.output_file_format, ws.jacobian, "J_h2o_analytical.xml", 0)
# H2O, perturbation Jacobian
#
ws.IndexNumberOfAtmosphericPoints(n=ws.ybatch_n, p_grid=ws.rgrid)
ws.NumericSet(ws.perturbation, 0.001)
ws.jacobianOff()
ws.pnd_fieldCalcFromParticleBulkProps()
ws.cloudbox_checkedCalc()
#
@arts_agenda
def ybatch_calc_agenda(ws):
    ws.vmr_fieldPerturb(
        p_ret_grid=ws.rgrid,
        lat_ret_grid=ws.lat_grid,
        lon_ret_grid=ws.lon_grid,
        species="H2O-PWR98",
        pert_index=ws.ybatch_index,
        pert_size=ws.perturbation,
        pert_mode="relative",
    )
    ws.yActive()


ws.ybatch_calc_agenda = ybatch_calc_agenda

#
ws.ybatchCalc(ybatch_start=0)
ws.jacobianFromYbatch(pert_size=ws.perturbation)
ws.Copy(ws.Jp, ws.jacobian)
ws.WriteXML(ws.output_file_format, ws.jacobian, "J_h2o_perturbation.xml", 0)
#
ws.CompareRelative(ws.Ja, ws.Jp, 0.2)
ws.Exit()
#
# Code below looks at the temperature Jacobian. For temperature we expect
# significant differences as the analytical version assumes that dPSD/dT is
# zero, while this term is non-zero in the perturbation calculations.
#
# Temperature, analytical Jacobian
#
ws.Copy(ws.rgrid, ws.p_grid)
#
ws.jacobianInit()
#
ws.jacobianAddTemperature(hse="off", g1=ws.rgrid, g2=ws.lat_grid, g3=ws.lon_grid)
#
ws.jacobianClose()
#
ws.pnd_fieldCalcFromParticleBulkProps()
#
ws.cloudbox_checkedCalc()
ws.yActive()
#
ws.Copy(ws.Ja, ws.jacobian)
ws.WriteXML(ws.output_file_format, ws.jacobian, "J_t_analytical.xml", 0)
# Temparature, perturbation Jacobian
#
ws.IndexNumberOfAtmosphericPoints(n=ws.ybatch_n, p_grid=ws.rgrid)
ws.NumericSet(ws.perturbation, 0.1)
ws.jacobianOff()
ws.pnd_fieldCalcFromParticleBulkProps()
ws.cloudbox_checkedCalc()
#
@arts_agenda
def ybatch_calc_agenda(ws):
    ws.AtmFieldPerturb(
        perturbed_field=ws.t_field,
        original_field=ws.t_field,
        p_ret_grid=ws.rgrid,
        lat_ret_grid=ws.lat_grid,
        lon_ret_grid=ws.lon_grid,
        pert_index=ws.ybatch_index,
        pert_size=ws.perturbation,
        pert_mode="absolute",
    )
    ws.yActive()


ws.ybatch_calc_agenda = ybatch_calc_agenda

#
ws.ybatchCalc(ybatch_start=0)
ws.jacobianFromYbatch(pert_size=ws.perturbation)
ws.Copy(ws.Jp, ws.jacobian)
ws.WriteXML(ws.output_file_format, ws.jacobian, "J_t_perturbation.xml", 0)
